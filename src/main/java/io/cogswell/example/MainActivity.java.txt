package io.cogswell.example;

import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.media.MediaPlayer;
import android.media.session.MediaController;
import android.net.Uri;
import android.os.PowerManager;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.widget.VideoView;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class MainActivity extends AppCompatActivity {
    private SensorManager mSensorManager;
    private SensorEventListener mSensorEventListener;

    private Sensor mAccelerometer ;
    MediaPlayer mediaPlayerChime;
    MediaPlayer mediaPlayerCampfire;
    int mediaPlayerChimeDuration=0;
    Boolean mediaPlayerChimeIsPlaying=false;
    PowerManager.WakeLock wakeLock;
    double magLowPass=0;
    double magAveNoise=0;
    double magAlpha = 0.01;
    long timestampDebounce =0;
    long timestampDebounceTimeNs = 100000000;
    MediaPlayer theStoryAudio;
    String currentCharacter;
    //long timestampDebounceTimeNs = 1000000000; //1s

    JsonStoryLoader jsl;

    int ePoints = 0;
    int currentLevel = 0;

    SoundManager soundManager;

    private Map<String, Integer> characterScores;

    Set<String> storiesTold = new HashSet<String>();
    private void initCharacterScores() {
        characterScores = new HashMap<String, Integer>();

        characterScores.put("rogue", 0);
        characterScores.put("tank", 0);
        characterScores.put("mage", 0);
        characterScores.put("fighter", 0);
        characterScores.put("healer", 0);
    }

    public SoundManager getSoundManager() {
        return soundManager;
    }

    public void chooseStory() {
        int thoughtfulSeconds = (int)(Math.random()*2+2);
        try {
            Thread.sleep(thoughtfulSeconds * 1000);
        } catch (Exception e) {}

        int maxLevels=3;
        ePoints=0;

        Log.d(this.getClass().toString(), "chooseStory():");

        Log.d(this.getClass().toString(), "chooseStory(): storiesTold "+storiesTold);

        List<String> stories = jsl.getStories(currentLevel);
        List<String> untoldStories = new ArrayList<String>();
        for(String story : stories) {
            story += "_" + currentLevel;
            if(!storiesTold.contains(story)) {
                untoldStories.add(story);
            }
        }
        Log.d(this.getClass().toString(), "chooseStory(): untoldStories "+untoldStories);

        if(untoldStories.size() == 0) {
            Log.d(this.getClass().toString(), "chooseStory(): characterScores "+characterScores);

            currentLevel++;
            if (currentLevel<maxLevels) {
                //toldStories = jsl.getStories(currentLevel);
                chooseStoryBridge();
            } else {
                chooseStoryEnding();
            }
        } else {
            chooseStoryCharacterFocused(untoldStories);
        }

        Log.d(this.getClass().toString(), "chooseStory(): untoldStories "+untoldStories);
    }
    public void chooseStoryBridge() {
        if (currentLevel==1) {
            soundManager.playSound("bridge_0_to_1", new Runnable() {
                @Override
                public void run() {
                    chooseStory();
                }
            });
        } else {
            soundManager.playSound("bridge_1_to_2", new Runnable() {
                @Override
                public void run() {
                    chooseStory();
                }
            });
        }
    }

    public void chooseStoryCharacterFocused(List<String> untoldStories) {
        int storyIndex = (int) (Math.random() * untoldStories.size());
        final String _story = untoldStories.get(storyIndex);
        currentCharacter = _story.split("_")[0];
        final String character = _story.split("_")[0];
        final int ePointsCurrentThreshold = jsl.getCharacterValue(currentLevel, character, "threshold");

        soundManager.playSound(_story, new Runnable() {
            @Override
            public void run() {
                Log.d(this.getClass().toString(), _story + " "+ePoints+" "+ePointsCurrentThreshold);
                if (ePoints>=ePointsCurrentThreshold) {
                    soundManager.playSound(_story + "_positive", new Runnable() {
                        @Override
                        public void run() {
                            Log.d(this.getClass().toString(), _story + "_positive completed");
                            characterScores.put(character,characterScores.get(character)+1);
                            chooseStory();
                        }
                    });
                } else {
                    soundManager.playSound(_story + "_negative", new Runnable() {
                        @Override
                        public void run() {
                            Log.d(this.getClass().toString(), _story + "_negative completed");
                            //characterScores.put(character,characterScores.get(character)-1);
                            chooseStory();
                        }
                    });
                }
            }
        });
        storiesTold.add(_story);
    }
    void chooseStoryEnding() {
        // ENDING

        final int threshold = 2;
        final String mage_end = "mage_"+((characterScores.get("mage")>=threshold)?"happy":"sad");
        final String fighter_end = "fighter_"+((characterScores.get("fighter")>=threshold)?"happy":"sad");
        final String tank_end = "tank_"+((characterScores.get("tank")>=threshold)?"happy":"sad");
        final String rogue_end = "rogue_"+((characterScores.get("rogue")>=threshold)?"happy":"sad");

        soundManager.playSound(mage_end, new Runnable() {
            @Override
            public void run() {
                soundManager.playSound(fighter_end, new Runnable() {
                    @Override
                    public void run() {
                        soundManager.playSound(tank_end, new Runnable() {
                            @Override
                            public void run() {
                                soundManager.playSound(rogue_end, new Runnable() {
                                    @Override
                                    public void run() {

                                        if (characterScores.get("fighter")>=threshold &&
                                                characterScores.get("rogue")>=threshold &&
                                                characterScores.get("tank")>=threshold &&
                                                characterScores.get("mage")>=threshold ) {
                                            soundManager.playSound("everyone_happy", new Runnable() {
                                                @Override
                                                public void run() {
                                                    MainActivity.this.completeGame();
                                                }
                                            });
                                        } else
                                        if (characterScores.get("fighter")<=threshold &&
                                                characterScores.get("rogue")<=threshold &&
                                                characterScores.get("tank")<=threshold &&
                                                characterScores.get("mage")<=threshold ) {
                                            soundManager.playSound("everyone_sad", new Runnable() {
                                                @Override
                                                public void run() {
                                                    MainActivity.this.completeGame();
                                                }
                                            });
                                        } else {
                                            MainActivity.this.completeGame();
                                        }

                                    }
                                });
                            }
                        });
                    }
                });
            }
        });

    }

    protected void completeGame() {
        Log.d(this.getClass().toString(), "completeGame() start");
        soundManager.playSound("game_closing", new Runnable() {
            @Override
            public void run() {
                Log.d(this.getClass().toString(), "completeGame() end");
                MainActivity.this.wakeLock.release();
                MainActivity.this.mSensorManager.unregisterListener(mSensorEventListener);
                MainActivity.this.moveTaskToBack(true);
                android.os.Process.killProcess(android.os.Process.myPid());
            }
        });
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        initCharacterScores();

        soundManager = new SoundManager(this);
        jsl = new JsonStoryLoader(this);

        introPart1();
        //chooseStoryEnding();

        Log.d(this.getClass().toString(), "onCreate() NEW!!!" + jsl.get(0, "rogue", 0, "start") + " " + jsl.getStories(0));

        setContentView(R.layout.activity_main);

        PowerManager powerManager = (PowerManager) getSystemService(POWER_SERVICE);
        wakeLock = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,
                "MyWakelockTag");
        wakeLock.acquire();

        mediaPlayerChime = MediaPlayer.create(this, R.raw.chime3);
        mediaPlayerChime.setOnCompletionListener(new android.media.MediaPlayer.OnCompletionListener() {
            @Override
            public void onCompletion(MediaPlayer mediaPlayer) {
                Log.d(this.getClass().toString(), "Sound end");
                mediaPlayerChimeIsPlaying=false;
            }
        });
        mediaPlayerChimeDuration = mediaPlayerChime.getDuration();

        mSensorManager = (SensorManager) getSystemService(this.SENSOR_SERVICE);
        mAccelerometer  = mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);

        //SensorEvent.values[0]
        mSensorEventListener = new SensorEventListener() {

            @Override
            public void onSensorChanged(SensorEvent sensorEvent) {

                double mag = Math.sqrt(
                    sensorEvent.values[0]*sensorEvent.values[0]+
                    sensorEvent.values[1]*sensorEvent.values[1]+
                    sensorEvent.values[2]*sensorEvent.values[2]);
                // TODO: Consider: sensorEvent.timestamp Weight the low pass filter by time?
                double magRelative = mag-magLowPass;
                magLowPass = magLowPass + magAlpha*magRelative;
                magAveNoise = magAveNoise+magAlpha*(Math.abs(magRelative)-magAveNoise);
                double magThreshold = magAveNoise*4+5;
                long timestamp = sensorEvent.timestamp;

                if (magRelative>magThreshold && timestamp>timestampDebounce) {
                    timestampDebounce = timestamp + timestampDebounceTimeNs;

//                    Log.d(this.getClass().toString(),
//                          "SensorEvent "
//                                    + " db " + timestampDebounce
//                                    + " t " + timestamp);


                    synchronized (mediaPlayerChimeIsPlaying) {
//                        if (!mediaPlayerChime.isPlaying()) {
                        if (theStoryAudio!=null && !theStoryAudio.isPlaying()) {
                            //play sound here

                        } else
                        if (!mediaPlayerChimeIsPlaying) {
                            Log.d(this.getClass().toString(),"mediaPlayerChimeIsPlaying a "+mediaPlayerChimeIsPlaying);
                            mediaPlayerChimeIsPlaying = true;
                            Log.d(this.getClass().toString(), "mediaPlayerChimeIsPlaying b " + mediaPlayerChimeIsPlaying);
//                            Log.d(this.getClass().toString(),
//                                    "SensorEvent "
//                                            + " diff " + magRelative
//                                            + "> thresh " + magThreshold
//                                            + " mag " + mag
//                                            + " ave " + magLowPass
//                                            + " " + "Start");
                            mediaPlayerChime.start();

                            if (currentCharacter!=null) {
                                ePoints += jsl.score(currentLevel, currentCharacter, soundManager.mp.getCurrentPosition());
                            } else {
                                ePoints+=1;
                            }
                            Log.d(this.getClass().toString(),"ePoints "+ePoints);

                            //    } else {
                            //        Log.d(this.getClass().toString(),
                            //                "LOSE!");
                            //        ePoints-=1;
                            //    }
                            //}

                        } else if (mediaPlayerChime.isPlaying()) {
                            int positionMs = mediaPlayerChime.getCurrentPosition();
                            Log.d(this.getClass().toString(), "SensorEvent " + mag + " Position " + positionMs + (int) (positionMs * 100 / mediaPlayerChimeDuration) + " " + timestamp + "ns");
                        }
                    }
                }
            }

            @Override
            public void onAccuracyChanged(Sensor sensor, int i) {}
        };
        mSensorManager.registerListener( mSensorEventListener , mAccelerometer, SensorManager.SENSOR_DELAY_FASTEST);
/*
http://developer.android.com/guide/topics/sensors/sensors_overview.html

SENSOR_DELAY_FASTEST 0 microsecond
SENSOR_DELAY_GAME 20,000 microsecond
SENSOR_DELAY_UI 60,000 microsecond
SENSOR_DELAY_NORMAL 200,000 microseconds(200 milliseconds)
 */
    }
    //https://software.intel.com/en-us/articles/using-accelerometer-in-windows-8-metro-style-app-and-a-case-study-of-tap-detection/

    @Override
    public void onResume() {
        super.onResume();
/*
        VideoView videoView = (VideoView) findViewById(R.id.campfire_video);



        videoView.setVideoURI(
                Uri.parse("android.resource://" + getPackageName() + "/" + R.raw.campfire_video)
        );
        videoView.start();
*/
    }


    /////////////////////////////////////////////////////////////////////////////////
    // Intro
    /////////////////////////////////////////////////////////////////////////////////

    void introPart1 () {
        Log.d(this.getClass().toString(),"introPart1 ()");
        ePoints=0;
        waitingForUserToClick3TimesCount=0;
        soundManager.playSound("intro1", new Runnable() {
            public void run() {
                if (ePoints >= 3) {
                    MainActivity.this.introPart2();
                } else {
                    MainActivity.this.waitingForUserToClick3Times();
                }
            }
        });
    }


    int waitingForUserToClick3TimesCount = 0;
    void waitingForUserToClick3Times () {
        waitingForUserToClick3TimesCount++;
        soundManager.playSound("intro1_waiting", new Runnable() {
            public void run() {
                if (ePoints >= 3) {
                    MainActivity.this.introPart2();
                } else if (waitingForUserToClick3TimesCount < 4) {
                    MainActivity.this.waitingForUserToClick3Times();
                } else {
                    // Don't loop forever.
                    MainActivity.this.completeGame();
                }
            }
        });
    }

    private void playFire() {
        Log.d(this.getClass().toString(), "playFire():");
        mediaPlayerCampfire = MediaPlayer.create(this, R.raw.campfire_audio);
        mediaPlayerCampfire.setLooping(true);
        mediaPlayerCampfire.start();
    }

    void introPart2 () {
        soundManager.playSound("intro2", new Runnable() {
            public void run() {
                playFire();
                MainActivity.this.chooseStory();
            }
        });
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.menu_my, menu);
        return true;
    }

/*
    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        //noinspection SimplifiableIfStatement
        if (id == R.values.action_settings) {
            return true;
        }

        return super.onOptionsItemSelected(item);
    }*/
}
